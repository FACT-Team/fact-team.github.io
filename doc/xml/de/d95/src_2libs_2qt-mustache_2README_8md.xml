<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.6">
  <compounddef id="de/d95/src_2libs_2qt-mustache_2README_8md" kind="file">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">[![Build<sp/>Status](https:</highlight><highlight class="comment">//travis-ci.org/robertknight/qt-mustache.svg?branch=master)](https://travis-ci.org/robertknight/qt-mustache)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>Qt<sp/>Mustache</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal">qt-mustache<sp/>is<sp/>a<sp/>simple<sp/>library<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>rendering<sp/>[Mustache<sp/>templates](http:</highlight><highlight class="comment">//mustache.github.com/).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Example<sp/>Usage</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal">```cpp</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mustache.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">QVariantHash<sp/>contact;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">contact[</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;John<sp/>Smith&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">contact[</highlight><highlight class="stringliteral">&quot;email&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;john.smith@gmail.com&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">QString<sp/>contactTemplate<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&lt;b&gt;{{name}}&lt;/b&gt;<sp/>&lt;a<sp/>href=\&quot;mailto:{{email}}\&quot;&gt;{{email}}&lt;/a&gt;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="dc/d58/classMustache_1_1Renderer" kindref="compound">Mustache::Renderer</ref><sp/>renderer;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><ref refid="d5/d8b/classMustache_1_1QtVariantContext" kindref="compound">Mustache::QtVariantContext</ref><sp/>context(contact);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">QTextStream<sp/>output(stdout);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">output<sp/>&lt;&lt;<sp/>renderer.<ref refid="dc/d58/classMustache_1_1Renderer_1ab82d90fe802606145d1f7ed9f2a9cf81" kindref="member">render</ref>(contactTemplate,<sp/>&amp;context);</highlight></codeline>
<codeline lineno="23"><highlight class="normal">```</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">Outputs:<sp/>`&lt;b&gt;John<sp/>Smith&lt;/b&gt;<sp/>&lt;a<sp/>href=</highlight><highlight class="stringliteral">&quot;mailto:john.smith@gmail.com&quot;</highlight><highlight class="normal">&gt;john.smith@gmail.com&lt;/a&gt;`</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">For<sp/>further<sp/>examples,<sp/>see<sp/>the<sp/>tests<sp/>in<sp/>`test_mustache.cpp`</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Building</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>*<sp/>To<sp/>build<sp/>the<sp/>tests,<sp/>run<sp/>`qmake`<sp/>followed<sp/>by<sp/>`make`</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/>*<sp/>To<sp/>use<sp/>qt-mustache<sp/>in<sp/>your<sp/>project,<sp/>just<sp/>add<sp/>the<sp/>`mustache.h`<sp/>and<sp/>`mustache.cpp`<sp/>files<sp/>to<sp/>your<sp/>project.</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>License</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>qt-mustache<sp/>is<sp/>licensed<sp/>under<sp/>the<sp/>BSD<sp/>license.<sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Dependencies</highlight></codeline>
<codeline lineno="37"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/>qt-mustache<sp/>depends<sp/>on<sp/>the<sp/>QtCore<sp/>library.<sp/><sp/>It<sp/>is<sp/>compatible<sp/>with<sp/>Qt<sp/>4<sp/>and<sp/>Qt<sp/>5.</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">##<sp/>Usage</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Syntax</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">qt-mustache<sp/>uses<sp/>the<sp/>standard<sp/>Mustache<sp/>syntax.<sp/><sp/>See<sp/>the<sp/>[Mustache<sp/>manual](http:</highlight><highlight class="comment">//mustache.github.com/mustache.5.html)<sp/>for<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Data<sp/>Sources</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">qt-mustache<sp/>expands<sp/>Mustache<sp/>tags<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>values<sp/>from<sp/>a<sp/>`<ref refid="d7/d34/classMustache_1_1Context" kindref="compound">Mustache::Context</ref>`.<sp/><sp/>`<ref refid="d5/d8b/classMustache_1_1QtVariantContext" kindref="compound">Mustache::QtVariantContext</ref>`<sp/>is<sp/>a<sp/>simple</highlight></codeline>
<codeline lineno="48"><highlight class="normal">context<sp/>implementation<sp/>which<sp/>wraps<sp/>a<sp/>`QVariantHash`<sp/>or<sp/>`QVariantMap`.<sp/><sp/>If<sp/>you<sp/>want<sp/>to<sp/>render<sp/>a<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>a<sp/>custom<sp/>data<sp/>source,</highlight></codeline>
<codeline lineno="49"><highlight class="normal">you<sp/>can<sp/>either<sp/>create<sp/>a<sp/>`QVariantHash`<sp/>which<sp/>mirrors<sp/>the<sp/>data<sp/>source<sp/>or<sp/>you<sp/>can<sp/>re-implement<sp/>`<ref refid="d7/d34/classMustache_1_1Context" kindref="compound">Mustache::Context</ref>`.</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">###<sp/>Partials</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">When<sp/>a<sp/>`{{&gt;partial}}`<sp/>Mustache<sp/>tag<sp/>is<sp/>encountered,<sp/>qt-mustache<sp/>will<sp/>attempt<sp/>to<sp/>load<sp/>the<sp/>partial<sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>a<sp/>`<ref refid="d0/dce/classMustache_1_1PartialResolver" kindref="compound">Mustache::PartialResolver</ref>`</highlight></codeline>
<codeline lineno="54"><highlight class="normal">provided<sp/>by<sp/>the<sp/>context.<sp/><sp/>`<ref refid="dc/d1a/classMustache_1_1PartialMap" kindref="compound">Mustache::PartialMap</ref>`<sp/>is<sp/>a<sp/>simple<sp/>resolver<sp/>which<sp/>takes<sp/>a<sp/>`QHash&lt;QString,QString&gt;`<sp/>map<sp/>of<sp/>partial<sp/>names</highlight></codeline>
<codeline lineno="55"><highlight class="normal">to<sp/>values<sp/>and<sp/>looks<sp/>up<sp/>partials<sp/>in<sp/>that<sp/>map.<sp/><sp/>`<ref refid="da/d31/classMustache_1_1PartialFileLoader" kindref="compound">Mustache::PartialFileLoader</ref>`<sp/>is<sp/>another<sp/>simple<sp/>resolver<sp/>which</highlight></codeline>
<codeline lineno="56"><highlight class="normal">fetches<sp/>partials<sp/>from<sp/>`&lt;partial<sp/>name&gt;.mustache`<sp/>files<sp/>in<sp/>a<sp/>specified<sp/>directory.</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">You<sp/>can<sp/>re-implement<sp/>the<sp/>`<ref refid="d0/dce/classMustache_1_1PartialResolver" kindref="compound">Mustache::PartialResolver</ref>`<sp/></highlight><highlight class="keyword">interface<sp/></highlight><highlight class="normal">if<sp/>you<sp/>want<sp/>to<sp/>load<sp/>partials<sp/>from<sp/>a<sp/>custom<sp/>source</highlight></codeline>
<codeline lineno="59"><highlight class="normal">(eg.<sp/>a<sp/>database).</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">###<sp/>Error<sp/>Handling</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">If<sp/>an<sp/>error<sp/>occurs<sp/>when<sp/>rendering<sp/>a<sp/>template,<sp/>`Mustache::Renderer::errorPosition()`<sp/>is<sp/>set<sp/>to<sp/>non-negative<sp/>value<sp/>and</highlight></codeline>
<codeline lineno="64"><highlight class="normal">template<sp/>rendering<sp/>stops.<sp/><sp/>If<sp/>the<sp/>error<sp/>occurs<sp/>whilst<sp/>rendering<sp/>a<sp/>partial<sp/>template,<sp/>`errorPartial()`<sp/>contains<sp/>the<sp/>name</highlight></codeline>
<codeline lineno="65"><highlight class="normal">of<sp/>the<sp/>partial.</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">###<sp/>Lambdas</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">The<sp/>[Mustache<sp/>manual](http:</highlight><highlight class="comment">//mustache.github.com/mustache.5.html)<sp/>provides<sp/>a<sp/>mechanism<sp/>to<sp/>customize<sp/>rendering<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">template<sp/>sections<sp/>by<sp/>setting<sp/>the<sp/>value<sp/>for<sp/>a<sp/>tag<sp/>to<sp/>a<sp/>callable<sp/>object<sp/>(eg.<sp/>a<sp/>lambda<sp/>in<sp/>Ruby<sp/>or<sp/>Javascript),</highlight></codeline>
<codeline lineno="71"><highlight class="normal">which<sp/>takes<sp/>the<sp/>unrendered<sp/>block<sp/>of<sp/>text<sp/>for<sp/>a<sp/>template<sp/>section<sp/>and<sp/>renders<sp/>it<sp/>itself.<sp/><sp/>qt-mustache<sp/>supports</highlight></codeline>
<codeline lineno="72"><highlight class="normal">this<sp/>via<sp/>the<sp/>`Context::canEval()`<sp/>and<sp/>`Context::eval()`<sp/>methods.</highlight></codeline>
    </programlisting>
    <location file="/home/travis/build/FACT-Team/FactDev/src/libs/qt-mustache/README.md"/>
  </compounddef>
</doxygen>
